# -*- coding: utf-8 -*-
"""FinalProjectPt2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CuPttPtBUM_Nzf1n1ZlXyHw0PcWV8Mjg

# **Dependencies**

- pandas
- sklearn
"""

# Step 1: Imports
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import VotingClassifier, RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Read data
df = pd.read_csv("/content/movie_final project.csv")
df

"""# **Data Preprocessing**"""

# Step 3: Preprocessing
# Drop rows with missing audience_score
df = df.dropna(subset=['audience_score'])
df = df.dropna(subset=['critic_score'])
df = df.dropna(subset=['runtime'])

# Binarize audience_score
df['audience_sentiment'] = df['audience_score'].apply(lambda x: 1 if x >= 50 else 0)

# Using 2 predictors
X = df[['runtime', 'critic_score']]
y = df['audience_sentiment']

"""# **Training & Model Setup**

- Defining Models
- Voting Classifier
- Grid Search
- Evaluation
"""

# Step 4: Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Step 5: Define Base Models
lr = LogisticRegression()
rf = RandomForestClassifier(random_state=42)
svc = SVC(probability=True)

# Step 6: Combine with VotingClassifier
voting = VotingClassifier(estimators=[
    ('lr', lr),
    ('rf', rf),
    ('svc', svc)
], voting='soft')

# Step 7: Grid Search for Tuning
param_grid = {
    'lr__C': [0.1, 1.0, 10],
    'rf__n_estimators': [50, 100],
    'svc__C': [0.1, 1.0, 10]
}

grid = GridSearchCV(estimator=voting, param_grid=param_grid, cv=5, scoring='accuracy')
grid.fit(X_train, y_train)

# Step 8: Evaluate
y_pred = grid.best_estimator_.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

"""# **Accuracy**"""

print("Best Parameters:", grid.best_params_)
print("Test Accuracy:", accuracy)

